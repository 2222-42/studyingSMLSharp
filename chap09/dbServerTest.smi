_require "basis.smi"
_require "sql.smi"
_require "reify.smi"
_require "./myDBEnv.smi"

type personTy= {age: int, name: string}
type myDBty = {persons: {age: int, name: string} list, accounts: {balance: int, name: string} list}
type resultTy = {name: string, age: int} list
type fromTy = {p: personTy} list
type whereTy = fromTy -> fromTy

val myDBserver : myDBty SQL.server
val myDBconn : myDBty SQL.conn

val Q : myDBty SQL.conn -> personTy SQL.cursor
val myDBcur : {age: int, name: string} SQL.cursor
val selectYoung : int -> ['a#{persons: 'b list},
                          'b#{age: int, name: string}.
                          'a SQL.conn -> (string*int) SQL.cursor]
val youngResult : (string*int) SQL.cursor
val insertPersons : {age: int, name: string} list -> ['e#{persons: 'f list}, 'f#{age: int, name: string}. 'e SQL.conn -> unit]
val myDBinsertPersons : {age: int, name: string} list -> myDBty SQL.conn -> unit
val retire : int -> ['c#{persons: {age: int, name: string} list}, 'd#{age: int}. 'c SQL.conn -> unit]
val newAcademicYear : ['a#{persons: 'b list}, 'b#{age: int}. 'a SQL.conn -> unit];
val myDBnewAcademicYear : myDBty SQL.conn -> unit
val atomicTransfer : int -> string -> string -> ['a#{accounts: 'b list}, 'b#{balance: int, name: string}. 'a SQL.conn -> unit]
